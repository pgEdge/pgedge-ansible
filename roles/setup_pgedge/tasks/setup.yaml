---

- name: Set up Spock to manage node metadata
  shell: |
    cd {{ cluster_path }}
    ./pgedge spock node-create edge{{ zone }}  \
      'host={{ inventory_hostname }} user={{ ansible_user_id }} dbname={{ item }}' \
      {{ item }}
  loop: "{{ db_names }}"

- name: Set Spock to handle transaction exceptions
  shell: |
    cd {{ cluster_path }}
    ./pgedge db guc-set spock.exception_behaviour {{ spock_exception_behaviour }}

- name: Set the snowflake ID for this spock node
  shell: |
    cd {{ cluster_path }}
    ./pgedge db guc-set snowflake.node {{ zone }}

- name: Set Spock to copy DDL
  shell: |
    cd {{ cluster_path }}
    ./pgedge db guc-set spock.enable_ddl_replication on
    ./pgedge db guc-set spock.allow_ddl_from_functions on
    ./pgedge db guc-set spock.include_ddl_repset on

# Loop through every other known pgEdge node and subscribe to it.
# This is technically a nested loop, since we need to subscribe to each DB on
# every node.

- name: Subscribe to other pgEdge nodes and databases in the cluster, by zone
  shell: |
    cd {{ cluster_path }}
    ./pgedge spock sub-create sub_n{{ zone }}_n{{ remote_zone }}  \
      'host={{ item.0 }} user={{ ansible_user_id }} dbname={{ item.1 }}' \
      {{ item.1 }}
  vars:
    remote_zone: "{{ hostvars[item.0]['zone'] }}"
  loop: >-
    {{ groups['pgedge'] | reject('equalto', inventory_hostname) | 
    product(db_names) | list }}
