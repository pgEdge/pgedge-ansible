---

- name: Set up Spock to manage node metadata
  shell: |
    cd {{ cluster_path }}
    ./pgedge spock node-create edge{{ zone }}  \
      'host={{ subscribe_target }} user={{ ansible_user_id }} dbname={{ item }}' \
      {{ item }}
  loop: "{{ db_names }}"

# Loop through every _other_ zone than our own and subscribe in this order:
#
# - The user-specified proxy_node for the host, if present.
# - The first node in the `haproxy` group for this zone, if any.
# - The first pgedge node in the zone itself, assuming no proxies match.
#
# We retry a few times in case the proxy layer is still negotiating checks by
# the time we reach this.

- name: Subscribe to any other pgEdge nodes in the cluster, by zone
  shell: |
    cd {{ cluster_path }}
    ./pgedge spock sub-create sub_n{{ zone }}_n{{ item.0 }}  \
      'host={{ conn_target }} user={{ ansible_user_id }} dbname={{ item.1 }}' \
      {{ item.1 }}
  vars:
    remote_first_node: >-
      {{ groups['pgedge'] |
      map('extract', hostvars) |
      selectattr('zone', 'eq', item.0) |
      map(attribute='inventory_hostname') | list | first }}
    remote_proxy_node: >-
      {{ hostvars[remote_first_node].proxy_node | default('') }}
    remote_proxies: >-
      {{ groups['haproxy'] | default(()) |
      map('extract', hostvars) |
      selectattr('zone', 'eq', item.0) |
      map(attribute='inventory_hostname') | list }}
    conn_target: >-
      {{ remote_proxy_node if remote_proxy_node > ''
         else remote_proxies | first if remote_proxies
         else remote_first_node }}
  retries: 5
  delay: 10
  register: subscription
  until: subscription.rc == 0
  loop: "{{ zone_list | reject('equalto', zone) | product(db_names) | list }}"
